# -*- coding: utf-8 -*-
"""aqi svm

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1thAc0A6cxkPi-wb8oG-wiVif1LOfjdzP
"""

#import libraries
import requests #api call
import pandas as pd
import time

city=str(input())

a=f'http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid=008b8e65bdd2f8d9bdac364934825bb4'
req=requests.get(a)
data=req.json()

import json
import csv
import pandas as pd


a=pd.json_normalize(data)

b=a.to_csv('data1.csv', encoding='utf-8', index=True)
print(b)
df = pd.read_csv('data1.csv')

d=a.to_json('data2.json')

with open('data2.json','r') as f:
  e=json.load(f)
  g=e['lat']
  h=e['lon']

lon=h['0']
lat=g['0']

a=f'http://api.openweathermap.org/data/2.5/air_pollution/forecast?lat={lat}&lon={lon}&appid=008b8e65bdd2f8d9bdac364934825bb4'
req=requests.get(a)
data=req.json()

data['list']

type(data)

#i= data['list'][1]
#print(i)
  #for j in i['components']:

k=0
v=[]  #print(j)
co=[]
no=[]
no2=[]
o3=[]
so2=[]
pm2_5=[]
pm10=[]
nh3=[]

for i in range(len(data['list'])):
  
  b=data['list'][i]
  j=b['components']
  
    
    
  v.append(k)
  c=pd.DataFrame(j.items()) 
  co.append(c[1][0])
  no.append(c[1][1])
  no2.append(c[1][2])
  o3.append(c[1][3])
  so2.append(c[1][4])
  pm2_5.append(c[1][5])
  pm10.append(c[1][6])
  nh3.append(c[1][7])
  k+=1

a=dict()
#a = dict({"co": co},{'no':no})
a['co']=co
a['no']=no
a['no2']=no2
a['o3']=o3
a['so2']=so2
a['pm2_5']=pm2_5
a['pm10']=pm10
a['nh3']=nh3
a['val']=v
#,{'no2':no2},{'o3':o3},{'so2':so2},{'pm2_5':pm2_5},{'pm10',pm10},{'nh3':nh3})

data=pd.DataFrame(a)
print(data)

a=sum(data['co']/len(data['co']))
z=sum(data['no']/len(data['no']))
y=sum(data['no2']/len(data['no2']))
x=sum(data['o3']/len(data['o3']))
v=sum(data['so2']/len(data['so2']))
w=sum(data['pm10']/len(data['pm10']))
u=sum(data['nh3']/len(data['nh3']))
q=(a+z+y+x+v+w+u)/7
aq=dict()
aq['co']=a
aq['no']=z
aq['no2']=y
aq['o3']=x
aq['so2']=v
aq['pm10']=w
aq['nh3']=u
aq['AQI_INDEX']=q
#print(aq)
#aqi1=pd.DataFrame(aq.items())
aqi1=pd.DataFrame([aq])
print(aqi1)

data.head()

data.describe()

import matplotlib.pyplot as plt
import seaborn as sns
plt.xlabel('value')
plt.ylabel('co ')
plt.plot(co)
plt.plot(no)

# importing Randomforest
from sklearn.ensemble import AdaBoostRegressor
from sklearn.ensemble import RandomForestRegressor

aqi1.head()

train1 = aqi1.drop(['AQI_INDEX'], axis=1)
target = aqi1['AQI_INDEX']
m1 = RandomForestRegressor()
m1.fit(train1, target)

m1.score(train1, target) * 100

aqi=m1.predict([[123, 45, 67, 34, 5, 0, 23]])
print(aqi)